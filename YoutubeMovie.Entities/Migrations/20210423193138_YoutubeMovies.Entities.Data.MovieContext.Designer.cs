// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YoutubeMovie.Entities.Data;

namespace YoutubeMovie.Entities.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20210423193138_YoutubeMovies.Entities.Data.MovieContext")]
    partial class YoutubeMoviesEntitiesDataMovieContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("YoutubeMovie.Entities.Models.DbBaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DbBaseEntity");
                });

            modelBuilder.Entity("YoutubeMovie.Entities.Models.Category", b =>
                {
                    b.HasBaseType("YoutubeMovie.Entities.Models.DbBaseEntity");

                    b.Property<Guid?>("BaseEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BaseEntityId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("YoutubeMovie.Entities.Models.Comment", b =>
                {
                    b.HasBaseType("YoutubeMovie.Entities.Models.DbBaseEntity");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("YoutubeMovie.Entities.Models.Slider", b =>
                {
                    b.HasBaseType("YoutubeMovie.Entities.Models.DbBaseEntity");

                    b.Property<Guid?>("BaseEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BaseEntityId");

                    b.ToTable("Slider");
                });

            modelBuilder.Entity("YoutubeMovie.Entities.Models.User", b =>
                {
                    b.HasBaseType("YoutubeMovie.Entities.Models.DbBaseEntity");

                    b.Property<Guid?>("BaseEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BaseEntityId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("YoutubeMovie.Entities.Models.Video", b =>
                {
                    b.HasBaseType("YoutubeMovie.Entities.Models.DbBaseEntity");

                    b.Property<Guid?>("BaseEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImbdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("YoutubeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("BaseEntityId");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("YoutubeMovie.Entities.Models.Category", b =>
                {
                    b.HasOne("YoutubeMovie.Entities.Models.DbBaseEntity", "BaseEntity")
                        .WithMany()
                        .HasForeignKey("BaseEntityId");

                    b.HasOne("YoutubeMovie.Entities.Models.DbBaseEntity", null)
                        .WithOne()
                        .HasForeignKey("YoutubeMovie.Entities.Models.Category", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BaseEntity");
                });

            modelBuilder.Entity("YoutubeMovie.Entities.Models.Comment", b =>
                {
                    b.HasOne("YoutubeMovie.Entities.Models.DbBaseEntity", null)
                        .WithOne()
                        .HasForeignKey("YoutubeMovie.Entities.Models.Comment", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("YoutubeMovie.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeMovie.Entities.Models.Slider", b =>
                {
                    b.HasOne("YoutubeMovie.Entities.Models.DbBaseEntity", "BaseEntity")
                        .WithMany()
                        .HasForeignKey("BaseEntityId");

                    b.HasOne("YoutubeMovie.Entities.Models.DbBaseEntity", null)
                        .WithOne()
                        .HasForeignKey("YoutubeMovie.Entities.Models.Slider", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BaseEntity");
                });

            modelBuilder.Entity("YoutubeMovie.Entities.Models.User", b =>
                {
                    b.HasOne("YoutubeMovie.Entities.Models.DbBaseEntity", "BaseEntity")
                        .WithMany()
                        .HasForeignKey("BaseEntityId");

                    b.HasOne("YoutubeMovie.Entities.Models.DbBaseEntity", null)
                        .WithOne()
                        .HasForeignKey("YoutubeMovie.Entities.Models.User", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BaseEntity");
                });

            modelBuilder.Entity("YoutubeMovie.Entities.Models.Video", b =>
                {
                    b.HasOne("YoutubeMovie.Entities.Models.DbBaseEntity", "BaseEntity")
                        .WithMany()
                        .HasForeignKey("BaseEntityId");

                    b.HasOne("YoutubeMovie.Entities.Models.DbBaseEntity", null)
                        .WithOne()
                        .HasForeignKey("YoutubeMovie.Entities.Models.Video", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BaseEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
